#!/usr/bin/env python

# Authors: Timofei Istomin <tim.ist@gmail.com>
#          Matteo Trobinger <matteo.trobinger@gmail.com>

import sys
import argparse
import traceback
import os
import subprocess
import itertools
import datetime
import json

from collections import namedtuple, OrderedDict
from shutil import copy, rmtree
from jinja2 import Template

# GOAL: Automatically generate "wcb_test.json" to be used in the testbed.
# NB:   simgen_templates_ebc should be MANUALLY GENERATED by the user starting
#       from simgen_templates_example.py but considering the specific file paths
from simgen_templates_ebc import TESTBED_TEMPLATE

run_path = os.path.dirname(sys.argv[0])
wcb_path = os.path.dirname(run_path)


ap = argparse.ArgumentParser(description='Simulation generator')
ap.add_argument('--basepath', required=False, default=wcb_path,
                help='Base path')
ap.add_argument('-c', '--config', required=False, default="params.py",
                help='Configuration python file')

args = ap.parse_args()


basepath = args.basepath
print("Base path: {}".format(basepath))
apppath = os.path.join(basepath, "apps", "wcb-test")
sys.path += [".", os.path.join(basepath, "test_tools")]
params = args.config


def prepare_binary(simdir, binary_name, new_env):
    env = os.environ.copy()
    env.update(new_env)

    abs_bname = os.path.join(apppath, binary_name)
    abs_ihex_name = abs_bname + ".ihex"
    abs_env_name = abs_bname + ".env"

    pwd = os.getcwd()
    os.chdir(apppath)
    subprocess.check_call(["sh", "-c", "./build_simgen.sh"], env=env)
    os.chdir(pwd)

    try:
        os.makedirs(simdir)
    except OSError as e:
        print(e)

    copy(abs_bname, simdir)
    if os.path.isfile(abs_ihex_name):
        copy(abs_ihex_name, simdir)
    copy(abs_env_name, simdir)


def mk_env(power, channel, sink, n_empty):
    cflags = [
        "-DTX_POWER=%d" % power,
        "-DWCB_CONF_DEF_CHANNEL=%d" % channel,
        "-DSINK_ID=%d" % sink,
        "-DWCB_CONF_PERIOD_MS=%d" % (int(period * 1000)),
        "-DWCB_CONF_NTX_S=%d" % n_tx_s,
        "-DWCB_CONF_NTX_T=%d" % n_tx_t,
        "-DWCB_CONF_NTX_A=%d" % n_tx_a,
        "-DWCB_CONF_NTX_EV=%d" % n_tx_ev,
        "-DWCB_CONF_NTX_CTRL=%d" % n_tx_ctrl,
        "-DWCB_CONF_DUR_S_MS=%d" % dur_s,
        "-DWCB_CONF_DUR_T_MS=%d" % dur_t,
        "-DWCB_CONF_DUR_A_MS=%d" % dur_a,
        "-DWCB_CONF_DUR_EV_MS=%d" % dur_ev,
        "-DWCB_CONF_DUR_CTRL_MS=%d" % dur_ctrl,
        "-DWCB_EV_SLOTS=%d" % n_ev_slot,
        "-DWCB_CONTROL_SLOTS=%d" % n_ctrl_slot,
        "-DWCB_MAX_TAS_RECV=%d" % max_tas_recv,
        "-DWCB_CONF_SYNC_ACKS=%d" % sync_ack,
        "-DWCB_CONF_MAX_SILENT_TAS=%d" % n_empty.y,
        "-DWCB_CONF_MAX_MISSING_ACKS=%d" % n_empty.z,
        "-DWCB_CONF_CHHOP_MAPPING=CHMAP_%s" % chmap,
        "-DWCB_CONF_BSTRAP_CHHOPPING=BSTRAP_%s" % boot_chop,
        "-DWCB_RECOVERY_ON=%d" % recovery_on,
        "-DWCB_ON_BOARD=%d" % on_board,
        "-DSYNCH_BOOTSTRAP=%d" % synch_bs,
        "-DTOPOLOGY=%d" % topology,
    ]

    if logging:
        cflags += ["-DWCB_CONF_LOGLEVEL=WCB_LOGS_ALL"]
    else:
        cflags += ["-DDISABLE_UART=1"]

    if testbed in ("unitn",):
        cflags += ["-DSTART_DELAY_SINK=10", "-DSTART_DELAY_NONSINK=5"]
    else:
        cflags += ["-DSTART_DELAY_SINK=0", "-DSTART_DELAY_NONSINK=0"]

    cflags = " ".join(cflags)
    new_env = {"CFLAGS": cflags}
    return new_env


glb = {}
pars = {}
with open(params) as f:
    code = compile(f.read(), params, 'exec')
    exec(code, glb, pars)


def set_defaults(dst, src):
    for k, v in src.items():
        if k not in dst:
            dst[k] = v


NemptyTuple = namedtuple("NemptyTuple", "y z")

defaults = {
    "period": 3,
    "sync_ack": 1,
    "logging": True,
}

set_defaults(pars, defaults)

print(f"Using the following params")
print(pars)

globals().update(pars)


print(f"---------- Preparing simulations ----------")

if not duration:
    duration = 4500
if not start_time:
    start_time = "asap"

TESTBED_INIT_TIME_FORMAT = "%Y-%m-%d %H:%M"
SIMULATION_OFFSET = 60

testbed_template = Template(TESTBED_TEMPLATE)
SIM_DURATION = duration
START_TIME = start_time

TEST_VERSION = test_version
SEED_NUMBER = seed_num

sim_start_time = None
try:
    sim_start_time = datetime.datetime.strptime(
        START_TIME, TESTBED_INIT_TIME_FORMAT)
except ValueError:
    pass

binary_name = "wcb-test.bin"

simnum = 0
for (power, channel, sink, n_empty) in itertools.product(powers, channels, sinks, n_emptys):
    n_empty = NemptyTuple(*n_empty)
    simdir = "sink%03d_p%02d_c%02d_e%.2f_ns%02d_nt%02d_na%02d_nev%02d_nctr%02d_ds%02d_dt%02d_da%02d_dev%02d_dctr%02d_nev_s%02d_nctr_s%02d_mta_rcv%02d_syna%d_y%02dz%02d_%s_%s_B%s_ro%d_sbs%d_flr%d_ver_%s_seed_%d_ob%d" % (
        sink, power, channel, period, n_tx_s, n_tx_t, n_tx_a, n_tx_ev, n_tx_ctrl, dur_s, dur_t, dur_a, dur_ev, dur_ctrl,
        n_ev_slot, n_ctrl_slot, max_tas_recv, sync_ack, n_empty.y, n_empty.z, testbed, chmap,
        boot_chop, recovery_on, synch_bs, topology, test_version, seed_num, on_board)

    testbed_filled_template = testbed_template.render(
        start_time=START_TIME,
        duration_seconds=SIM_DURATION,
        duration_minutes=int(SIM_DURATION / 60),
        abs_bin_path="",
        version=TEST_VERSION,
        seed=SEED_NUMBER,
        targets="\"\""
    )
    sim_testfile = json.loads(testbed_filled_template)
    if sim_start_time is not None:
        sim_testfile["start_time"] = datetime.datetime.\
            strftime(sim_start_time, TESTBED_INIT_TIME_FORMAT)
        # increase sim_start_time for the next simulation
        sim_start_time += datetime.timedelta(
            seconds=SIM_DURATION + SIMULATION_OFFSET)

    if os.path.isdir(simdir):
        continue
    try:
        # Store the list of nodes to the "targets" field withint the testfile
        sim_testfile["binaries"]["targets"] = list(nodes)

        if sink not in nodes:
            raise Exception("Sink node doesn't exist")

        new_env = mk_env(power, channel, sink, n_empty)
        prepare_binary(simdir, binary_name, new_env)

        # Write testbed file in the simulation folder
        relative_sim_binary_name = os.path.join(simdir, binary_name)
        sim_testfile["binaries"]["bin_file"] = os.path.abspath(
            relative_sim_binary_name)
        sim_testfile_path = os.path.join(simdir, "sim_wcb_test.json")
        json.dump(sim_testfile, open(sim_testfile_path, "w"), indent=2)

        with open(os.path.join(simdir, "params_tbl.txt"), "w") as f:
            p = OrderedDict()
            p["testbed"] = testbed
            p["power"] = power
            p["channel"] = channel
            p["period"] = period
            p["recovery_on"] = recovery_on
            p["sink"] = sink
            p["n_tx_s"] = n_tx_s
            p["n_tx_t"] = n_tx_t
            p["n_tx_a"] = n_tx_a
            p["n_tx_ev"] = n_tx_ev
            p["n_tx_ctrl"] = n_tx_ctrl
            p["dur_s"] = dur_s
            p["dur_t"] = dur_t
            p["dur_a"] = dur_a
            p["dur_ev"] = dur_ev
            p["dur_ctrl"] = dur_ctrl
            p["n_ev_slot"] = n_ev_slot
            p["n_ctrl_slot"] = n_ctrl_slot
            p["max_tas_recv"] = max_tas_recv
            p["sync_ack"] = sync_ack
            p["n_empty.y"] = n_empty.y
            p["n_empty.z"] = n_empty.z
            p["chmap"] = chmap
            p["boot_chop"] = boot_chop
            p["synch_bs"] = synch_bs
            p["topology"] = topology
            p["on_board"] = on_board
            header = " ".join(p.keys())
            values = " ".join([str(x) for x in p.values()])
            f.write(header)
            f.write("\n")
            f.write(values)
            f.write("\n")
        simnum += 1
        print(f"-" * 40)
    except Exception as e:
        traceback.print_exc()
        if os.path.isdir(simdir):
            rmtree(simdir)
        raise e


print(f"{simnum} simulation(s) generated")
